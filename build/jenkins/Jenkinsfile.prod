pipeline {
  agent any
  parameters {
    choice(name: 'Task', choices: ['none', 'all', 'filter', 'referralroles','symptomgroups','symptomdiscriminators','symptomdiscriminatorsynonyms','symptomgroupdiscriminators'], description: 'Select which task to deploy')
  }
  options {
    buildDiscarder(logRotator(daysToKeepStr: "7", numToKeepStr: "13"))
    disableConcurrentBuilds()
    parallelsAlwaysFailFast()
    timeout(time: 50, unit: "MINUTES")
  }
  environment {
    GIT_TAG = "${env.BRANCH_NAME}"
    PROFILE = sh(returnStdout: true, script: "make parse-profile-from-tag GIT_TAG=$GIT_TAG").trim()
    TASK = "${params.Task}"
  }
  triggers { pollSCM(env.BRANCH_NAME == "main" ? "* * * * *" : "") }
  stages {
    stage("Show Configuration") {
      when { expression { env.PROFILE == "put" || env.PROFILE == "live" } }
      steps {
        script { sh "make show-configuration" }
      }
    }

    stage("Propagate Artefacts") {
      when {
        expression { params.Task != "none" }
        expression { env.PROFILE == "put" || env.PROFILE == "live" }
      }
      steps {
        script { sh "make propagate ARTEFACTS=${params.Task}" }
      }
    }

    stage("Deploy") {
      when {
        expression { params.Task != "none" }
        expression { env.PROFILE == "put" || env.PROFILE == "live" }
      }
      steps {
        script { sh "make provision TASK=${params.Task}" }
      }
    }
  }
  post {
    always { sh "make pipeline-send-notification PIPELINE_NAME='UEC DoS Tasks (Production)' BUILD_STATUS=${currentBuild.currentResult}" }
    cleanup { sh "make clean" }
  }
}
